# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from ._enums import *

__all__ = [
    'ChmodOptsArgs',
    'CurlOptsArgs',
    'EtcdctlOptsArgs',
    'HostnamectlOptsArgs',
    'MkdirOptsArgs',
    'MktempOptsArgs',
    'MvOptsArgs',
    'RmOptsArgs',
    'SedOptsArgs',
    'SystemctlOptsArgs',
    'TarOptsArgs',
    'TeeOptsArgs',
    'WgetOptsArgs',
]

@pulumi.input_type
class ChmodOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 mode: pulumi.Input[str],
                 changes: Optional[pulumi.Input[bool]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 no_preserve_root: Optional[pulumi.Input[bool]] = None,
                 preserve_root: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 reference: Optional[pulumi.Input[str]] = None,
                 silent: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `chmod` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[str] mode: Modes may be absolute or symbolic. An absolute mode is an octal number...
        :param pulumi.Input[bool] changes: Like verbose but report only when a change is made.
        :param pulumi.Input[bool] help: Display help and exit.
        :param pulumi.Input[bool] no_preserve_root: Do not treat '/' specially (the default).
        :param pulumi.Input[bool] preserve_root: Fail to operate recursively on '/'.
        :param pulumi.Input[bool] quiet: Suppress most error messages. Same as `silent`.
        :param pulumi.Input[bool] recursive: Change files and directories recursively.
        :param pulumi.Input[str] reference: Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
        :param pulumi.Input[bool] silent: Suppress most error messages. Same as `quiet`.
        :param pulumi.Input[bool] version: Output version information and exit.
        """
        pulumi.set(__self__, "files", files)
        pulumi.set(__self__, "mode", mode)
        if changes is not None:
            pulumi.set(__self__, "changes", changes)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if no_preserve_root is not None:
            pulumi.set(__self__, "no_preserve_root", no_preserve_root)
        if preserve_root is not None:
            pulumi.set(__self__, "preserve_root", preserve_root)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if reference is not None:
            pulumi.set(__self__, "reference", reference)
        if silent is not None:
            pulumi.set(__self__, "silent", silent)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def mode(self) -> pulumi.Input[str]:
        """
        Modes may be absolute or symbolic. An absolute mode is an octal number...
        """
        return pulumi.get(self, "mode")

    @mode.setter
    def mode(self, value: pulumi.Input[str]):
        pulumi.set(self, "mode", value)

    @property
    @pulumi.getter
    def changes(self) -> Optional[pulumi.Input[bool]]:
        """
        Like verbose but report only when a change is made.
        """
        return pulumi.get(self, "changes")

    @changes.setter
    def changes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "changes", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        Display help and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter(name="noPreserveRoot")
    def no_preserve_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not treat '/' specially (the default).
        """
        return pulumi.get(self, "no_preserve_root")

    @no_preserve_root.setter
    def no_preserve_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_preserve_root", value)

    @property
    @pulumi.getter(name="preserveRoot")
    def preserve_root(self) -> Optional[pulumi.Input[bool]]:
        """
        Fail to operate recursively on '/'.
        """
        return pulumi.get(self, "preserve_root")

    @preserve_root.setter
    def preserve_root(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "preserve_root", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress most error messages. Same as `silent`.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Change files and directories recursively.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def reference(self) -> Optional[pulumi.Input[str]]:
        """
        Use RFILE's mode instead of specifying MODE values. RFILE is always dereferenced if a symbolic link.
        """
        return pulumi.get(self, "reference")

    @reference.setter
    def reference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reference", value)

    @property
    @pulumi.getter
    def silent(self) -> Optional[pulumi.Input[bool]]:
        """
        Suppress most error messages. Same as `quiet`.
        """
        return pulumi.get(self, "silent")

    @silent.setter
    def silent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "silent", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class CurlOptsArgs:
    def __init__(__self__, *,
                 urls: pulumi.Input[Sequence[pulumi.Input[str]]],
                 abstract_unix_socket: Optional[pulumi.Input[str]] = None,
                 alt_svc: Optional[pulumi.Input[str]] = None,
                 any_auth: Optional[pulumi.Input[bool]] = None,
                 append: Optional[pulumi.Input[bool]] = None,
                 aws_sigv4: Optional[pulumi.Input[str]] = None,
                 basic: Optional[pulumi.Input[bool]] = None,
                 cacert: Optional[pulumi.Input[str]] = None,
                 capath: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 cert_status: Optional[pulumi.Input[bool]] = None,
                 cert_type: Optional[pulumi.Input['CurlCertType']] = None,
                 ciphers: Optional[pulumi.Input[str]] = None,
                 compressed: Optional[pulumi.Input[bool]] = None,
                 compressed_ssh: Optional[pulumi.Input[bool]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 connect_timeout: Optional[pulumi.Input[int]] = None,
                 connect_to: Optional[pulumi.Input[str]] = None,
                 continue_at: Optional[pulumi.Input[str]] = None,
                 cookie: Optional[pulumi.Input[str]] = None,
                 cookie_jar: Optional[pulumi.Input[str]] = None,
                 create_dirs: Optional[pulumi.Input[bool]] = None,
                 create_file_mode: Optional[pulumi.Input[str]] = None,
                 crlf: Optional[pulumi.Input[bool]] = None,
                 crlf_file: Optional[pulumi.Input[str]] = None,
                 curves: Optional[pulumi.Input[str]] = None,
                 data: Optional[pulumi.Input[str]] = None,
                 data_ascii: Optional[pulumi.Input[str]] = None,
                 data_binary: Optional[pulumi.Input[str]] = None,
                 data_raw: Optional[pulumi.Input[str]] = None,
                 data_url_encode: Optional[pulumi.Input[str]] = None,
                 delegation: Optional[pulumi.Input['CurlDelegationLevel']] = None,
                 digest: Optional[pulumi.Input[bool]] = None,
                 disable: Optional[pulumi.Input[bool]] = None,
                 disable_eprt: Optional[pulumi.Input[bool]] = None,
                 disable_epsv: Optional[pulumi.Input[bool]] = None,
                 disallow_username_in_url: Optional[pulumi.Input[bool]] = None,
                 dns_interface: Optional[pulumi.Input[str]] = None,
                 dns_ipv4_addr: Optional[pulumi.Input[str]] = None,
                 dns_ipv6_addr: Optional[pulumi.Input[str]] = None,
                 dns_servers: Optional[pulumi.Input[str]] = None,
                 doh_cert_status: Optional[pulumi.Input[bool]] = None,
                 doh_insecure: Optional[pulumi.Input[bool]] = None,
                 doh_url: Optional[pulumi.Input[str]] = None,
                 dump_header: Optional[pulumi.Input[str]] = None,
                 egd_file: Optional[pulumi.Input[str]] = None,
                 engine: Optional[pulumi.Input[str]] = None,
                 etag_compare: Optional[pulumi.Input[str]] = None,
                 etag_save: Optional[pulumi.Input[str]] = None,
                 expect100_timeout: Optional[pulumi.Input[int]] = None,
                 fail: Optional[pulumi.Input[bool]] = None,
                 fail_early: Optional[pulumi.Input[bool]] = None,
                 fail_with_body: Optional[pulumi.Input[bool]] = None,
                 false_start: Optional[pulumi.Input[bool]] = None,
                 form: Optional[pulumi.Input[str]] = None,
                 form_escape: Optional[pulumi.Input[bool]] = None,
                 form_name: Optional[pulumi.Input[str]] = None,
                 ftp_account: Optional[pulumi.Input[str]] = None,
                 ftp_alternative_user: Optional[pulumi.Input[str]] = None,
                 ftp_create_dirs: Optional[pulumi.Input[bool]] = None,
                 ftp_method: Optional[pulumi.Input[str]] = None,
                 ftp_pasv: Optional[pulumi.Input[bool]] = None,
                 ftp_port: Optional[pulumi.Input[str]] = None,
                 ftp_pret: Optional[pulumi.Input[bool]] = None,
                 ftp_skip_pasv_ip: Optional[pulumi.Input[bool]] = None,
                 ftp_ssl_ccc_mode: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `curl` utility on a remote system. Transfer a URL.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] urls: Corresponds to the URLs argument.
        :param pulumi.Input[str] abstract_unix_socket: (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        :param pulumi.Input[str] alt_svc: (HTTPS)  This  option enables the alt-svc parser in curl.
        :param pulumi.Input[bool] any_auth: (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        :param pulumi.Input[bool] append: (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        :param pulumi.Input[str] aws_sigv4: Use AWS V4 signature authentication in the transfer.
        :param pulumi.Input[bool] basic: (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        :param pulumi.Input[str] cacert: (TLS)  Tells curl to use the specified certificate file to verify the peer.
        :param pulumi.Input[str] capath: (TLS) Tells curl to use the specified certificate directory to verify the peer.
        :param pulumi.Input[str] cert: (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        :param pulumi.Input[bool] cert_status: (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        :param pulumi.Input['CurlCertType'] cert_type: (TLS) Tells curl what type the provided client certificate is using.
        :param pulumi.Input[str] ciphers: (TLS) Specifies which ciphers to use in the connection.
        :param pulumi.Input[bool] compressed: (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        :param pulumi.Input[bool] compressed_ssh: (SCP SFTP) Enables built-in SSH compression.
        :param pulumi.Input[str] config: Specify a text file to read curl arguments from.
        :param pulumi.Input[int] connect_timeout: Maximum  time  in seconds that you allow curl's connection to take.
        :param pulumi.Input[str] connect_to: For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        :param pulumi.Input[str] continue_at: Continue/Resume a previous file transfer at the given offset.
        :param pulumi.Input[str] cookie: (HTTP) Pass the data to the HTTP server in the Cookie header.
        :param pulumi.Input[str] cookie_jar: (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        :param pulumi.Input[bool] create_dirs: When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        :param pulumi.Input[str] create_file_mode: (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        :param pulumi.Input[bool] crlf: (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        :param pulumi.Input[str] crlf_file: (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        :param pulumi.Input[str] curves: (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        :param pulumi.Input[str] data: (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        :param pulumi.Input[str] data_ascii: (HTTP) This is just an alias for -d, --data.
        :param pulumi.Input[str] data_binary: (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        :param pulumi.Input[str] data_raw: (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        :param pulumi.Input[str] data_url_encode: (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        :param pulumi.Input['CurlDelegationLevel'] delegation: (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        :param pulumi.Input[bool] digest: (HTTP) Enables HTTP Digest authentication.
        :param pulumi.Input[bool] disable: If used as the first parameter on the command line, the curlrc config file will not be read and used.
        :param pulumi.Input[bool] disable_eprt: (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        :param pulumi.Input[bool] disable_epsv: (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        :param pulumi.Input[bool] disallow_username_in_url: (HTTP) This tells curl to exit if passed a url containing a username.
        :param pulumi.Input[str] dns_interface: (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        :param pulumi.Input[str] dns_ipv4_addr: (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_ipv6_addr: (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        :param pulumi.Input[str] dns_servers: Set the list of DNS servers to be used instead of the system default.
        :param pulumi.Input[bool] doh_cert_status: Same as --cert-status but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[bool] doh_insecure: Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        :param pulumi.Input[str] doh_url: Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        :param pulumi.Input[str] dump_header: (HTTP FTP) Write the received protocol headers to the specified file.
        :param pulumi.Input[str] egd_file: (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        :param pulumi.Input[str] engine: (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        :param pulumi.Input[str] etag_compare: (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        :param pulumi.Input[str] etag_save: (HTTP) This option saves an HTTP ETag to the specified file.
        :param pulumi.Input[int] expect100_timeout: (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        :param pulumi.Input[bool] fail: (HTTP) Fail silently (no output at all) on server errors.
        :param pulumi.Input[bool] fail_early: Fail and exit on the first detected transfer error.
        :param pulumi.Input[bool] fail_with_body: (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        :param pulumi.Input[bool] false_start: (TLS) Tells curl to use false start during the TLS handshake.
        :param pulumi.Input[str] form: (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        :param pulumi.Input[bool] form_escape: (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        :param pulumi.Input[str] form_name: (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        :param pulumi.Input[str] ftp_account: (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        :param pulumi.Input[str] ftp_alternative_user: (FTP) If authenticating with the USER and PASS commands fails, send this command.
        :param pulumi.Input[bool] ftp_create_dirs: (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        :param pulumi.Input[str] ftp_method: (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        :param pulumi.Input[bool] ftp_pasv: (FTP) Use passive mode for the data connection.
        :param pulumi.Input[str] ftp_port: (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        :param pulumi.Input[bool] ftp_pret: (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        :param pulumi.Input[bool] ftp_skip_pasv_ip: (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        :param pulumi.Input[str] ftp_ssl_ccc_mode: (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        """
        pulumi.set(__self__, "urls", urls)
        if abstract_unix_socket is not None:
            pulumi.set(__self__, "abstract_unix_socket", abstract_unix_socket)
        if alt_svc is not None:
            pulumi.set(__self__, "alt_svc", alt_svc)
        if any_auth is not None:
            pulumi.set(__self__, "any_auth", any_auth)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if aws_sigv4 is not None:
            pulumi.set(__self__, "aws_sigv4", aws_sigv4)
        if basic is not None:
            pulumi.set(__self__, "basic", basic)
        if cacert is not None:
            pulumi.set(__self__, "cacert", cacert)
        if capath is not None:
            pulumi.set(__self__, "capath", capath)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if cert_status is not None:
            pulumi.set(__self__, "cert_status", cert_status)
        if cert_type is not None:
            pulumi.set(__self__, "cert_type", cert_type)
        if ciphers is not None:
            pulumi.set(__self__, "ciphers", ciphers)
        if compressed is not None:
            pulumi.set(__self__, "compressed", compressed)
        if compressed_ssh is not None:
            pulumi.set(__self__, "compressed_ssh", compressed_ssh)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if connect_to is not None:
            pulumi.set(__self__, "connect_to", connect_to)
        if continue_at is not None:
            pulumi.set(__self__, "continue_at", continue_at)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if cookie_jar is not None:
            pulumi.set(__self__, "cookie_jar", cookie_jar)
        if create_dirs is not None:
            pulumi.set(__self__, "create_dirs", create_dirs)
        if create_file_mode is not None:
            pulumi.set(__self__, "create_file_mode", create_file_mode)
        if crlf is not None:
            pulumi.set(__self__, "crlf", crlf)
        if crlf_file is not None:
            pulumi.set(__self__, "crlf_file", crlf_file)
        if curves is not None:
            pulumi.set(__self__, "curves", curves)
        if data is not None:
            pulumi.set(__self__, "data", data)
        if data_ascii is not None:
            pulumi.set(__self__, "data_ascii", data_ascii)
        if data_binary is not None:
            pulumi.set(__self__, "data_binary", data_binary)
        if data_raw is not None:
            pulumi.set(__self__, "data_raw", data_raw)
        if data_url_encode is not None:
            pulumi.set(__self__, "data_url_encode", data_url_encode)
        if delegation is not None:
            pulumi.set(__self__, "delegation", delegation)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if disable_eprt is not None:
            pulumi.set(__self__, "disable_eprt", disable_eprt)
        if disable_epsv is not None:
            pulumi.set(__self__, "disable_epsv", disable_epsv)
        if disallow_username_in_url is not None:
            pulumi.set(__self__, "disallow_username_in_url", disallow_username_in_url)
        if dns_interface is not None:
            pulumi.set(__self__, "dns_interface", dns_interface)
        if dns_ipv4_addr is not None:
            pulumi.set(__self__, "dns_ipv4_addr", dns_ipv4_addr)
        if dns_ipv6_addr is not None:
            pulumi.set(__self__, "dns_ipv6_addr", dns_ipv6_addr)
        if dns_servers is not None:
            pulumi.set(__self__, "dns_servers", dns_servers)
        if doh_cert_status is not None:
            pulumi.set(__self__, "doh_cert_status", doh_cert_status)
        if doh_insecure is not None:
            pulumi.set(__self__, "doh_insecure", doh_insecure)
        if doh_url is not None:
            pulumi.set(__self__, "doh_url", doh_url)
        if dump_header is not None:
            pulumi.set(__self__, "dump_header", dump_header)
        if egd_file is not None:
            pulumi.set(__self__, "egd_file", egd_file)
        if engine is not None:
            pulumi.set(__self__, "engine", engine)
        if etag_compare is not None:
            pulumi.set(__self__, "etag_compare", etag_compare)
        if etag_save is not None:
            pulumi.set(__self__, "etag_save", etag_save)
        if expect100_timeout is not None:
            pulumi.set(__self__, "expect100_timeout", expect100_timeout)
        if fail is not None:
            pulumi.set(__self__, "fail", fail)
        if fail_early is not None:
            pulumi.set(__self__, "fail_early", fail_early)
        if fail_with_body is not None:
            pulumi.set(__self__, "fail_with_body", fail_with_body)
        if false_start is not None:
            pulumi.set(__self__, "false_start", false_start)
        if form is not None:
            pulumi.set(__self__, "form", form)
        if form_escape is not None:
            pulumi.set(__self__, "form_escape", form_escape)
        if form_name is not None:
            pulumi.set(__self__, "form_name", form_name)
        if ftp_account is not None:
            pulumi.set(__self__, "ftp_account", ftp_account)
        if ftp_alternative_user is not None:
            pulumi.set(__self__, "ftp_alternative_user", ftp_alternative_user)
        if ftp_create_dirs is not None:
            pulumi.set(__self__, "ftp_create_dirs", ftp_create_dirs)
        if ftp_method is not None:
            pulumi.set(__self__, "ftp_method", ftp_method)
        if ftp_pasv is not None:
            pulumi.set(__self__, "ftp_pasv", ftp_pasv)
        if ftp_port is not None:
            pulumi.set(__self__, "ftp_port", ftp_port)
        if ftp_pret is not None:
            pulumi.set(__self__, "ftp_pret", ftp_pret)
        if ftp_skip_pasv_ip is not None:
            pulumi.set(__self__, "ftp_skip_pasv_ip", ftp_skip_pasv_ip)
        if ftp_ssl_ccc_mode is not None:
            pulumi.set(__self__, "ftp_ssl_ccc_mode", ftp_ssl_ccc_mode)

    @property
    @pulumi.getter
    def urls(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the URLs argument.
        """
        return pulumi.get(self, "urls")

    @urls.setter
    def urls(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "urls", value)

    @property
    @pulumi.getter(name="abstractUnixSocket")
    def abstract_unix_socket(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) Connect through an abstract Unix domain socket, instead of using the network.
        """
        return pulumi.get(self, "abstract_unix_socket")

    @abstract_unix_socket.setter
    def abstract_unix_socket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "abstract_unix_socket", value)

    @property
    @pulumi.getter(name="altSvc")
    def alt_svc(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTPS)  This  option enables the alt-svc parser in curl.
        """
        return pulumi.get(self, "alt_svc")

    @alt_svc.setter
    def alt_svc(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alt_svc", value)

    @property
    @pulumi.getter(name="anyAuth")
    def any_auth(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support.
        """
        return pulumi.get(self, "any_auth")

    @any_auth.setter
    def any_auth(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "any_auth", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it.
        """
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="awsSigv4")
    def aws_sigv4(self) -> Optional[pulumi.Input[str]]:
        """
        Use AWS V4 signature authentication in the transfer.
        """
        return pulumi.get(self, "aws_sigv4")

    @aws_sigv4.setter
    def aws_sigv4(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "aws_sigv4", value)

    @property
    @pulumi.getter
    def basic(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to use HTTP Basic authentication with the remote host.
        """
        return pulumi.get(self, "basic")

    @basic.setter
    def basic(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "basic", value)

    @property
    @pulumi.getter
    def cacert(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells curl to use the specified certificate file to verify the peer.
        """
        return pulumi.get(self, "cacert")

    @cacert.setter
    def cacert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cacert", value)

    @property
    @pulumi.getter
    def capath(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Tells curl to use the specified certificate directory to verify the peer.
        """
        return pulumi.get(self, "capath")

    @capath.setter
    def capath(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "capath", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells  curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol.
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter(name="certStatus")
    def cert_status(self) -> Optional[pulumi.Input[bool]]:
        """
        (TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension.
        """
        return pulumi.get(self, "cert_status")

    @cert_status.setter
    def cert_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "cert_status", value)

    @property
    @pulumi.getter(name="certType")
    def cert_type(self) -> Optional[pulumi.Input['CurlCertType']]:
        """
        (TLS) Tells curl what type the provided client certificate is using.
        """
        return pulumi.get(self, "cert_type")

    @cert_type.setter
    def cert_type(self, value: Optional[pulumi.Input['CurlCertType']]):
        pulumi.set(self, "cert_type", value)

    @property
    @pulumi.getter
    def ciphers(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Specifies which ciphers to use in the connection.
        """
        return pulumi.get(self, "ciphers")

    @ciphers.setter
    def ciphers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ciphers", value)

    @property
    @pulumi.getter
    def compressed(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content.
        """
        return pulumi.get(self, "compressed")

    @compressed.setter
    def compressed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compressed", value)

    @property
    @pulumi.getter(name="compressedSsh")
    def compressed_ssh(self) -> Optional[pulumi.Input[bool]]:
        """
        (SCP SFTP) Enables built-in SSH compression.
        """
        return pulumi.get(self, "compressed_ssh")

    @compressed_ssh.setter
    def compressed_ssh(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "compressed_ssh", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        Specify a text file to read curl arguments from.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        Maximum  time  in seconds that you allow curl's connection to take.
        """
        return pulumi.get(self, "connect_timeout")

    @connect_timeout.setter
    def connect_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "connect_timeout", value)

    @property
    @pulumi.getter(name="connectTo")
    def connect_to(self) -> Optional[pulumi.Input[str]]:
        """
        For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead.
        """
        return pulumi.get(self, "connect_to")

    @connect_to.setter
    def connect_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "connect_to", value)

    @property
    @pulumi.getter(name="continueAt")
    def continue_at(self) -> Optional[pulumi.Input[str]]:
        """
        Continue/Resume a previous file transfer at the given offset.
        """
        return pulumi.get(self, "continue_at")

    @continue_at.setter
    def continue_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "continue_at", value)

    @property
    @pulumi.getter
    def cookie(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) Pass the data to the HTTP server in the Cookie header.
        """
        return pulumi.get(self, "cookie")

    @cookie.setter
    def cookie(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie", value)

    @property
    @pulumi.getter(name="cookieJar")
    def cookie_jar(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP)  Specify  to which file you want curl to write all cookies after a completed operation.
        """
        return pulumi.get(self, "cookie_jar")

    @cookie_jar.setter
    def cookie_jar(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cookie_jar", value)

    @property
    @pulumi.getter(name="createDirs")
    def create_dirs(self) -> Optional[pulumi.Input[bool]]:
        """
        When used in conjunction with the -o, --output option, curl will create the necessary local directory hierarchy as needed.
        """
        return pulumi.get(self, "create_dirs")

    @create_dirs.setter
    def create_dirs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_dirs", value)

    @property
    @pulumi.getter(name="createFileMode")
    def create_file_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644.
        """
        return pulumi.get(self, "create_file_mode")

    @create_file_mode.setter
    def create_file_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_file_mode", value)

    @property
    @pulumi.getter
    def crlf(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390).
        """
        return pulumi.get(self, "crlf")

    @crlf.setter
    def crlf(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "crlf", value)

    @property
    @pulumi.getter(name="crlfFile")
    def crlf_file(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked.
        """
        return pulumi.get(self, "crlf_file")

    @crlf_file.setter
    def crlf_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "crlf_file", value)

    @property
    @pulumi.getter
    def curves(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS)  Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1.
        """
        return pulumi.get(self, "curves")

    @curves.setter
    def curves(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "curves", value)

    @property
    @pulumi.getter
    def data(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP  MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button.
        """
        return pulumi.get(self, "data")

    @data.setter
    def data(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data", value)

    @property
    @pulumi.getter(name="dataAscii")
    def data_ascii(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This is just an alias for -d, --data.
        """
        return pulumi.get(self, "data_ascii")

    @data_ascii.setter
    def data_ascii(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_ascii", value)

    @property
    @pulumi.getter(name="dataBinary")
    def data_binary(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data exactly as specified with no extra processing whatsoever.
        """
        return pulumi.get(self, "data_binary")

    @data_binary.setter
    def data_binary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_binary", value)

    @property
    @pulumi.getter(name="dataRaw")
    def data_raw(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data similarly to -d, --data but without the special interpretation of the @ character.
        """
        return pulumi.get(self, "data_raw")

    @data_raw.setter
    def data_raw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_raw", value)

    @property
    @pulumi.getter(name="dataUrlEncode")
    def data_url_encode(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This posts data, similar to the other -d, --data options with the exception that this performs URL-encoding.
        """
        return pulumi.get(self, "data_url_encode")

    @data_url_encode.setter
    def data_url_encode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "data_url_encode", value)

    @property
    @pulumi.getter
    def delegation(self) -> Optional[pulumi.Input['CurlDelegationLevel']]:
        """
        (GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.
        """
        return pulumi.get(self, "delegation")

    @delegation.setter
    def delegation(self, value: Optional[pulumi.Input['CurlDelegationLevel']]):
        pulumi.set(self, "delegation", value)

    @property
    @pulumi.getter
    def digest(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Enables HTTP Digest authentication.
        """
        return pulumi.get(self, "digest")

    @digest.setter
    def digest(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "digest", value)

    @property
    @pulumi.getter
    def disable(self) -> Optional[pulumi.Input[bool]]:
        """
        If used as the first parameter on the command line, the curlrc config file will not be read and used.
        """
        return pulumi.get(self, "disable")

    @disable.setter
    def disable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable", value)

    @property
    @pulumi.getter(name="disableEprt")
    def disable_eprt(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers
        """
        return pulumi.get(self, "disable_eprt")

    @disable_eprt.setter
    def disable_eprt(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_eprt", value)

    @property
    @pulumi.getter(name="disableEpsv")
    def disable_epsv(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP)  Tell  curl to disable the use of the EPSV command when doing passive FTP transfers
        """
        return pulumi.get(self, "disable_epsv")

    @disable_epsv.setter
    def disable_epsv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_epsv", value)

    @property
    @pulumi.getter(name="disallowUsernameInUrl")
    def disallow_username_in_url(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) This tells curl to exit if passed a url containing a username.
        """
        return pulumi.get(self, "disallow_username_in_url")

    @disallow_username_in_url.setter
    def disallow_username_in_url(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disallow_username_in_url", value)

    @property
    @pulumi.getter(name="dnsInterface")
    def dns_interface(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS)  Tell  curl  to send outgoing DNS requests through <interface>.
        """
        return pulumi.get(self, "dns_interface")

    @dns_interface.setter
    def dns_interface(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_interface", value)

    @property
    @pulumi.getter(name="dnsIpv4Addr")
    def dns_ipv4_addr(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv4_addr")

    @dns_ipv4_addr.setter
    def dns_ipv4_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_ipv4_addr", value)

    @property
    @pulumi.getter(name="dnsIpv6Addr")
    def dns_ipv6_addr(self) -> Optional[pulumi.Input[str]]:
        """
        (DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address.
        """
        return pulumi.get(self, "dns_ipv6_addr")

    @dns_ipv6_addr.setter
    def dns_ipv6_addr(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_ipv6_addr", value)

    @property
    @pulumi.getter(name="dnsServers")
    def dns_servers(self) -> Optional[pulumi.Input[str]]:
        """
        Set the list of DNS servers to be used instead of the system default.
        """
        return pulumi.get(self, "dns_servers")

    @dns_servers.setter
    def dns_servers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dns_servers", value)

    @property
    @pulumi.getter(name="dohCertStatus")
    def doh_cert_status(self) -> Optional[pulumi.Input[bool]]:
        """
        Same as --cert-status but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_cert_status")

    @doh_cert_status.setter
    def doh_cert_status(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "doh_cert_status", value)

    @property
    @pulumi.getter(name="dohInsecure")
    def doh_insecure(self) -> Optional[pulumi.Input[bool]]:
        """
        Same as -k, --insecure but used for DoH (DNS-over-HTTPS).
        """
        return pulumi.get(self, "doh_insecure")

    @doh_insecure.setter
    def doh_insecure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "doh_insecure", value)

    @property
    @pulumi.getter(name="dohUrl")
    def doh_url(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism.
        """
        return pulumi.get(self, "doh_url")

    @doh_url.setter
    def doh_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "doh_url", value)

    @property
    @pulumi.getter(name="dumpHeader")
    def dump_header(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP FTP) Write the received protocol headers to the specified file.
        """
        return pulumi.get(self, "dump_header")

    @dump_header.setter
    def dump_header(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dump_header", value)

    @property
    @pulumi.getter(name="egdFile")
    def egd_file(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Specify the path name to the Entropy Gathering Daemon socket.
        """
        return pulumi.get(self, "egd_file")

    @egd_file.setter
    def egd_file(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "egd_file", value)

    @property
    @pulumi.getter
    def engine(self) -> Optional[pulumi.Input[str]]:
        """
        (TLS) Select the OpenSSL crypto engine to use for cipher operations.
        """
        return pulumi.get(self, "engine")

    @engine.setter
    def engine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "engine", value)

    @property
    @pulumi.getter(name="etagCompare")
    def etag_compare(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag.
        """
        return pulumi.get(self, "etag_compare")

    @etag_compare.setter
    def etag_compare(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag_compare", value)

    @property
    @pulumi.getter(name="etagSave")
    def etag_save(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP) This option saves an HTTP ETag to the specified file.
        """
        return pulumi.get(self, "etag_save")

    @etag_save.setter
    def etag_save(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag_save", value)

    @property
    @pulumi.getter(name="expect100Timeout")
    def expect100_timeout(self) -> Optional[pulumi.Input[int]]:
        """
        (HTTP)  Maximum  time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request.
        """
        return pulumi.get(self, "expect100_timeout")

    @expect100_timeout.setter
    def expect100_timeout(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "expect100_timeout", value)

    @property
    @pulumi.getter
    def fail(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Fail silently (no output at all) on server errors.
        """
        return pulumi.get(self, "fail")

    @fail.setter
    def fail(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail", value)

    @property
    @pulumi.getter(name="failEarly")
    def fail_early(self) -> Optional[pulumi.Input[bool]]:
        """
        Fail and exit on the first detected transfer error.
        """
        return pulumi.get(self, "fail_early")

    @fail_early.setter
    def fail_early(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_early", value)

    @property
    @pulumi.getter(name="failWithBody")
    def fail_with_body(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP)  Return an error on server errors where the HTTP response code is 400 or greater).
        """
        return pulumi.get(self, "fail_with_body")

    @fail_with_body.setter
    def fail_with_body(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "fail_with_body", value)

    @property
    @pulumi.getter(name="falseStart")
    def false_start(self) -> Optional[pulumi.Input[bool]]:
        """
        (TLS) Tells curl to use false start during the TLS handshake.
        """
        return pulumi.get(self, "false_start")

    @false_start.setter
    def false_start(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "false_start", value)

    @property
    @pulumi.getter
    def form(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button.
        """
        return pulumi.get(self, "form")

    @form.setter
    def form(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form", value)

    @property
    @pulumi.getter(name="formEscape")
    def form_escape(self) -> Optional[pulumi.Input[bool]]:
        """
        (HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding.
        """
        return pulumi.get(self, "form_escape")

    @form_escape.setter
    def form_escape(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "form_escape", value)

    @property
    @pulumi.getter(name="formName")
    def form_name(self) -> Optional[pulumi.Input[str]]:
        """
        (HTTP SMTP IMAP) Similar to -F, --form except that the value string for the named parameter is used literally.
        """
        return pulumi.get(self, "form_name")

    @form_name.setter
    def form_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_name", value)

    @property
    @pulumi.getter(name="ftpAccount")
    def ftp_account(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) When an FTP server asks for 'account data' after user name and password has been provided, this data is sent off using the ACCT command.
        """
        return pulumi.get(self, "ftp_account")

    @ftp_account.setter
    def ftp_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_account", value)

    @property
    @pulumi.getter(name="ftpAlternativeUser")
    def ftp_alternative_user(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) If authenticating with the USER and PASS commands fails, send this command.
        """
        return pulumi.get(self, "ftp_alternative_user")

    @ftp_alternative_user.setter
    def ftp_alternative_user(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_alternative_user", value)

    @property
    @pulumi.getter(name="ftpCreateDirs")
    def ftp_create_dirs(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP  SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail.
        """
        return pulumi.get(self, "ftp_create_dirs")

    @ftp_create_dirs.setter
    def ftp_create_dirs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_create_dirs", value)

    @property
    @pulumi.getter(name="ftpMethod")
    def ftp_method(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) Control what method curl should use to reach a file on an FTP(S) server.
        """
        return pulumi.get(self, "ftp_method")

    @ftp_method.setter
    def ftp_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_method", value)

    @property
    @pulumi.getter(name="ftpPasv")
    def ftp_pasv(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Use passive mode for the data connection.
        """
        return pulumi.get(self, "ftp_pasv")

    @ftp_pasv.setter
    def ftp_pasv(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_pasv", value)

    @property
    @pulumi.getter(name="ftpPort")
    def ftp_port(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP)  Reverses  the  default  initiator/listener  roles  when connecting with FTP.
        """
        return pulumi.get(self, "ftp_port")

    @ftp_port.setter
    def ftp_port(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_port", value)

    @property
    @pulumi.getter(name="ftpPret")
    def ftp_pret(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP) Tell curl to send a PRET command before PASV (and EPSV).
        """
        return pulumi.get(self, "ftp_pret")

    @ftp_pret.setter
    def ftp_pret(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_pret", value)

    @property
    @pulumi.getter(name="ftpSkipPasvIp")
    def ftp_skip_pasv_ip(self) -> Optional[pulumi.Input[bool]]:
        """
        (FTP)  Tell  curl  to  not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection.
        """
        return pulumi.get(self, "ftp_skip_pasv_ip")

    @ftp_skip_pasv_ip.setter
    def ftp_skip_pasv_ip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ftp_skip_pasv_ip", value)

    @property
    @pulumi.getter(name="ftpSslCccMode")
    def ftp_ssl_ccc_mode(self) -> Optional[pulumi.Input[str]]:
        """
        (FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the  server.
        """
        return pulumi.get(self, "ftp_ssl_ccc_mode")

    @ftp_ssl_ccc_mode.setter
    def ftp_ssl_ccc_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ftp_ssl_ccc_mode", value)


@pulumi.input_type
class EtcdctlOptsArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input['EtcdctlCommand'],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 cert: Optional[pulumi.Input[str]] = None,
                 endpoints: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `etcdctl` utility on a remote system.
        :param pulumi.Input['EtcdctlCommand'] commands: TODO
        :param pulumi.Input[str] ca_cert: TODO
        :param pulumi.Input[str] cert: TODO
        :param pulumi.Input[str] endpoints: TODO
        :param pulumi.Input[str] key: TODO
        """
        pulumi.set(__self__, "commands", commands)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if cert is not None:
            pulumi.set(__self__, "cert", cert)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input['EtcdctlCommand']:
        """
        TODO
        """
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input['EtcdctlCommand']):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter
    def cert(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "cert")

    @cert.setter
    def cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cert", value)

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "endpoints")

    @endpoints.setter
    def endpoints(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "endpoints", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        TODO
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class HostnamectlOptsArgs:
    def __init__(__self__, *,
                 command: pulumi.Input['HostnamectlCommand'],
                 arg: Optional[pulumi.Input[str]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 json: Optional[pulumi.Input['HostnamectlJsonMode']] = None,
                 machine: Optional[pulumi.Input[str]] = None,
                 no_ask_password: Optional[pulumi.Input[bool]] = None,
                 pretty: Optional[pulumi.Input[bool]] = None,
                 static: Optional[pulumi.Input[bool]] = None,
                 transient: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `hostnamectl` utility on a remote system.
        :param pulumi.Input['HostnamectlCommand'] command: Corresponds to the {COMMAND} argument.
        :param pulumi.Input[str] arg: The argument for the specified `command`.
        :param pulumi.Input[bool] help: Print a short help text and exit.
        :param pulumi.Input[str] host: Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
        :param pulumi.Input['HostnamectlJsonMode'] json: Shows output formatted as JSON.
        :param pulumi.Input[str] machine: Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
        :param pulumi.Input[bool] no_ask_password: Do not query the user for authentication for privileged operations.
        :param pulumi.Input[bool] pretty: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
        :param pulumi.Input[bool] static: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
        :param pulumi.Input[bool] transient: If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
        :param pulumi.Input[bool] version: Print a short version string and exit.
        """
        pulumi.set(__self__, "command", command)
        if arg is not None:
            pulumi.set(__self__, "arg", arg)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if json is not None:
            pulumi.set(__self__, "json", json)
        if machine is not None:
            pulumi.set(__self__, "machine", machine)
        if no_ask_password is not None:
            pulumi.set(__self__, "no_ask_password", no_ask_password)
        if pretty is not None:
            pulumi.set(__self__, "pretty", pretty)
        if static is not None:
            pulumi.set(__self__, "static", static)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input['HostnamectlCommand']:
        """
        Corresponds to the {COMMAND} argument.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input['HostnamectlCommand']):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def arg(self) -> Optional[pulumi.Input[str]]:
        """
        The argument for the specified `command`.
        """
        return pulumi.get(self, "arg")

    @arg.setter
    def arg(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "arg", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        Print a short help text and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        Execute the operation remotely. Specify a hostname, or a username and hostname separated by '@', to connect to.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def json(self) -> Optional[pulumi.Input['HostnamectlJsonMode']]:
        """
        Shows output formatted as JSON.
        """
        return pulumi.get(self, "json")

    @json.setter
    def json(self, value: Optional[pulumi.Input['HostnamectlJsonMode']]):
        pulumi.set(self, "json", value)

    @property
    @pulumi.getter
    def machine(self) -> Optional[pulumi.Input[str]]:
        """
        Execute operation on a local container. Specify a container name to connect to, optionally prefixed by a user name to connect as and a separating '@' character.
        """
        return pulumi.get(self, "machine")

    @machine.setter
    def machine(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "machine", value)

    @property
    @pulumi.getter(name="noAskPassword")
    def no_ask_password(self) -> Optional[pulumi.Input[bool]]:
        """
        Do not query the user for authentication for privileged operations.
        """
        return pulumi.get(self, "no_ask_password")

    @no_ask_password.setter
    def no_ask_password(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_ask_password", value)

    @property
    @pulumi.getter
    def pretty(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `transient`.
        """
        return pulumi.get(self, "pretty")

    @pretty.setter
    def pretty(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pretty", value)

    @property
    @pulumi.getter
    def static(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `transient` and `pretty`.
        """
        return pulumi.get(self, "static")

    @static.setter
    def static(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "static", value)

    @property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input[bool]]:
        """
        If status is invoked (or no explicit command is given) and one of these switches is specified, hostnamectl will print out just this selected hostname. Same as `static` and `pretty`.
        """
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "transient", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Print a short version string and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class MkdirOptsArgs:
    def __init__(__self__, *,
                 directory: pulumi.Input[str],
                 parents: Optional[pulumi.Input[bool]] = None,
                 remove_on_delete: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `mkdir` utility on a remote system.
        :param pulumi.Input[str] directory: The fully qualified path of the directory on the remote system.
        :param pulumi.Input[bool] parents: Corresponds to the `--parents` option.
        :param pulumi.Input[bool] remove_on_delete: Remove the created directory when the `Mkdir` resource is deleted or updated.
        """
        pulumi.set(__self__, "directory", directory)
        if parents is not None:
            pulumi.set(__self__, "parents", parents)
        if remove_on_delete is not None:
            pulumi.set(__self__, "remove_on_delete", remove_on_delete)

    @property
    @pulumi.getter
    def directory(self) -> pulumi.Input[str]:
        """
        The fully qualified path of the directory on the remote system.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: pulumi.Input[str]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def parents(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--parents` option.
        """
        return pulumi.get(self, "parents")

    @parents.setter
    def parents(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "parents", value)

    @property
    @pulumi.getter(name="removeOnDelete")
    def remove_on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Remove the created directory when the `Mkdir` resource is deleted or updated.
        """
        return pulumi.get(self, "remove_on_delete")

    @remove_on_delete.setter
    def remove_on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "remove_on_delete", value)


@pulumi.input_type
class MktempOptsArgs:
    def __init__(__self__, *,
                 directory: Optional[pulumi.Input[bool]] = None,
                 dry_run: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[str]] = None,
                 tmpdir: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `mktemp` utility on a remote system.
        :param pulumi.Input[bool] directory: Corresponds to the `--directory` option.
        :param pulumi.Input[bool] dry_run: Corresponds to the `--dry-run` option.
        :param pulumi.Input[bool] quiet: Corresponds to the `--quiet` option.
        :param pulumi.Input[str] suffix: Corresponds to the `--suffix` option.
        :param pulumi.Input[str] template: Corresponds to the [TEMPLATE] argument.
        :param pulumi.Input[str] tmpdir: Corresponds to the `--tmpdir` option.
        """
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if template is not None:
            pulumi.set(__self__, "template", template)
        if tmpdir is not None:
            pulumi.set(__self__, "tmpdir", tmpdir)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--directory` option.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--dry-run` option.
        """
        return pulumi.get(self, "dry_run")

    @dry_run.setter
    def dry_run(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dry_run", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--quiet` option.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--suffix` option.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [TEMPLATE] argument.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template", value)

    @property
    @pulumi.getter
    def tmpdir(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--tmpdir` option.
        """
        return pulumi.get(self, "tmpdir")

    @tmpdir.setter
    def tmpdir(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tmpdir", value)


@pulumi.input_type
class MvOptsArgs:
    def __init__(__self__, *,
                 source: pulumi.Input[Sequence[pulumi.Input[str]]],
                 backup: Optional[bool] = None,
                 context: Optional[pulumi.Input[bool]] = None,
                 control: Optional[pulumi.Input[bool]] = None,
                 dest: Optional[pulumi.Input[str]] = None,
                 directory: Optional[pulumi.Input[str]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 no_clobber: Optional[pulumi.Input[bool]] = None,
                 no_target_directory: Optional[pulumi.Input[bool]] = None,
                 strip_trailing_slashes: Optional[pulumi.Input[bool]] = None,
                 suffix: Optional[pulumi.Input[str]] = None,
                 target_directory: Optional[pulumi.Input[bool]] = None,
                 update: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `mv` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] source: Corresponds to the [SOURCE] argument.
        :param bool backup: Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
        :param pulumi.Input[bool] context: Corresponds to the `--context` option.
        :param pulumi.Input[bool] control: Corresponds to the [CONTROL] argument for the `--backup` option.
        :param pulumi.Input[str] dest: Corresponds to the [DEST] argument.
        :param pulumi.Input[str] directory: Corresponds to the [DIRECTORY] argument.
        :param pulumi.Input[bool] force: Corresponds to the `--force` option.
        :param pulumi.Input[bool] no_clobber: Corresponds to the `--no-clobber` option.
        :param pulumi.Input[bool] no_target_directory: Corresponds to the `--no-target-directory` option.
        :param pulumi.Input[bool] strip_trailing_slashes: Corresponds to the `--strip-trailing-slashes` option.
        :param pulumi.Input[str] suffix: Corresponds to the `--suffix` option.
        :param pulumi.Input[bool] target_directory: Corresponds to the `--target-directory` option.
        :param pulumi.Input[bool] update: Corresponds to the `--update` option.
        :param pulumi.Input[bool] verbose: Corresponds to the `--verbose` option.
        """
        pulumi.set(__self__, "source", source)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if context is not None:
            pulumi.set(__self__, "context", context)
        if control is not None:
            pulumi.set(__self__, "control", control)
        if dest is not None:
            pulumi.set(__self__, "dest", dest)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if no_clobber is not None:
            pulumi.set(__self__, "no_clobber", no_clobber)
        if no_target_directory is not None:
            pulumi.set(__self__, "no_target_directory", no_target_directory)
        if strip_trailing_slashes is not None:
            pulumi.set(__self__, "strip_trailing_slashes", strip_trailing_slashes)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if target_directory is not None:
            pulumi.set(__self__, "target_directory", target_directory)
        if update is not None:
            pulumi.set(__self__, "update", update)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def source(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [SOURCE] argument.
        """
        return pulumi.get(self, "source")

    @source.setter
    def source(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "source", value)

    @property
    @pulumi.getter
    def backup(self) -> Optional[bool]:
        """
        Corresponds to the `-b` and `--backup` options depending on whether [CONTROL] is supplied.
        """
        return pulumi.get(self, "backup")

    @backup.setter
    def backup(self, value: Optional[bool]):
        pulumi.set(self, "backup", value)

    @property
    @pulumi.getter
    def context(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--context` option.
        """
        return pulumi.get(self, "context")

    @context.setter
    def context(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "context", value)

    @property
    @pulumi.getter
    def control(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the [CONTROL] argument for the `--backup` option.
        """
        return pulumi.get(self, "control")

    @control.setter
    def control(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "control", value)

    @property
    @pulumi.getter
    def dest(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [DEST] argument.
        """
        return pulumi.get(self, "dest")

    @dest.setter
    def dest(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dest", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [DIRECTORY] argument.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--force` option.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="noClobber")
    def no_clobber(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--no-clobber` option.
        """
        return pulumi.get(self, "no_clobber")

    @no_clobber.setter
    def no_clobber(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_clobber", value)

    @property
    @pulumi.getter(name="noTargetDirectory")
    def no_target_directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--no-target-directory` option.
        """
        return pulumi.get(self, "no_target_directory")

    @no_target_directory.setter
    def no_target_directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_target_directory", value)

    @property
    @pulumi.getter(name="stripTrailingSlashes")
    def strip_trailing_slashes(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--strip-trailing-slashes` option.
        """
        return pulumi.get(self, "strip_trailing_slashes")

    @strip_trailing_slashes.setter
    def strip_trailing_slashes(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "strip_trailing_slashes", value)

    @property
    @pulumi.getter
    def suffix(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--suffix` option.
        """
        return pulumi.get(self, "suffix")

    @suffix.setter
    def suffix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suffix", value)

    @property
    @pulumi.getter(name="targetDirectory")
    def target_directory(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--target-directory` option.
        """
        return pulumi.get(self, "target_directory")

    @target_directory.setter
    def target_directory(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "target_directory", value)

    @property
    @pulumi.getter
    def update(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--update` option.
        """
        return pulumi.get(self, "update")

    @update.setter
    def update(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--verbose` option.
        """
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)


@pulumi.input_type
class RmOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 dir: Optional[pulumi.Input[bool]] = None,
                 force: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 verbose: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `rm` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] dir: Corresponds to the `--dir` option.
        :param pulumi.Input[bool] force: Corresponds to the `--force` option.
        :param pulumi.Input[bool] on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the `--recursive` option.
        :param pulumi.Input[bool] verbose: Corresponds to the `--verbose` option.
        """
        pulumi.set(__self__, "files", files)
        if dir is not None:
            pulumi.set(__self__, "dir", dir)
        if force is not None:
            pulumi.set(__self__, "force", force)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if verbose is not None:
            pulumi.set(__self__, "verbose", verbose)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def dir(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--dir` option.
        """
        return pulumi.get(self, "dir")

    @dir.setter
    def dir(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "dir", value)

    @property
    @pulumi.getter
    def force(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--force` option.
        """
        return pulumi.get(self, "force")

    @force.setter
    def force(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--recursive` option.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter
    def verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--verbose` option.
        """
        return pulumi.get(self, "verbose")

    @verbose.setter
    def verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verbose", value)


@pulumi.input_type
class SedOptsArgs:
    def __init__(__self__, *,
                 debug: Optional[pulumi.Input[bool]] = None,
                 expressions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 follow_symlinks: Optional[pulumi.Input[bool]] = None,
                 help: Optional[pulumi.Input[bool]] = None,
                 in_place: Optional[pulumi.Input[str]] = None,
                 input_files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 line_length: Optional[pulumi.Input[int]] = None,
                 null_data: Optional[pulumi.Input[bool]] = None,
                 posix: Optional[pulumi.Input[bool]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 regexp_extended: Optional[pulumi.Input[bool]] = None,
                 sandbox: Optional[pulumi.Input[bool]] = None,
                 script: Optional[pulumi.Input[str]] = None,
                 separate: Optional[pulumi.Input[bool]] = None,
                 silent: Optional[pulumi.Input[bool]] = None,
                 unbuffered: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `sed` utility on a remote system.
        :param pulumi.Input[bool] debug: annotate program execution.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] expressions: add the script to the commands to be executed.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: add the contents of script-file to the commands to be executed.
        :param pulumi.Input[bool] follow_symlinks: follow symlinks when processing in place
        :param pulumi.Input[bool] help: display this help and exit.
        :param pulumi.Input[str] in_place: edit files in place (makes backup if SUFFIX supplied)
        :param pulumi.Input[Sequence[pulumi.Input[str]]] input_files: corresponds to the [input-file]... argument(s).
        :param pulumi.Input[int] line_length: specify the desired line-wrap length for the `l' command
        :param pulumi.Input[bool] null_data: separate lines by NUL characters
        :param pulumi.Input[bool] posix: disable all GNU extensions.
        :param pulumi.Input[bool] quiet: suppress automatic printing of pattern space. Same as `silent`.
        :param pulumi.Input[bool] regexp_extended: use extended regular expressions in the script (for portability use POSIX -E).
        :param pulumi.Input[bool] sandbox: operate in sandbox mode (disable e/r/w commands).
        :param pulumi.Input[str] script: script only if no other script.
        :param pulumi.Input[bool] separate: consider files as separate rather than as a single, continuous long stream.
        :param pulumi.Input[bool] silent: suppress automatic printing of pattern space. Same as `quiet`.
        :param pulumi.Input[bool] unbuffered: load minimal amounts of data from the input files and flush the output buffers more often.
        :param pulumi.Input[bool] version: output version information and exit.
        """
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if expressions is not None:
            pulumi.set(__self__, "expressions", expressions)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if follow_symlinks is not None:
            pulumi.set(__self__, "follow_symlinks", follow_symlinks)
        if help is not None:
            pulumi.set(__self__, "help", help)
        if in_place is not None:
            pulumi.set(__self__, "in_place", in_place)
        if input_files is not None:
            pulumi.set(__self__, "input_files", input_files)
        if line_length is not None:
            pulumi.set(__self__, "line_length", line_length)
        if null_data is not None:
            pulumi.set(__self__, "null_data", null_data)
        if posix is not None:
            pulumi.set(__self__, "posix", posix)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if regexp_extended is not None:
            pulumi.set(__self__, "regexp_extended", regexp_extended)
        if sandbox is not None:
            pulumi.set(__self__, "sandbox", sandbox)
        if script is not None:
            pulumi.set(__self__, "script", script)
        if separate is not None:
            pulumi.set(__self__, "separate", separate)
        if silent is not None:
            pulumi.set(__self__, "silent", silent)
        if unbuffered is not None:
            pulumi.set(__self__, "unbuffered", unbuffered)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def debug(self) -> Optional[pulumi.Input[bool]]:
        """
        annotate program execution.
        """
        return pulumi.get(self, "debug")

    @debug.setter
    def debug(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "debug", value)

    @property
    @pulumi.getter
    def expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        add the script to the commands to be executed.
        """
        return pulumi.get(self, "expressions")

    @expressions.setter
    def expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "expressions", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        add the contents of script-file to the commands to be executed.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter(name="followSymlinks")
    def follow_symlinks(self) -> Optional[pulumi.Input[bool]]:
        """
        follow symlinks when processing in place
        """
        return pulumi.get(self, "follow_symlinks")

    @follow_symlinks.setter
    def follow_symlinks(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "follow_symlinks", value)

    @property
    @pulumi.getter
    def help(self) -> Optional[pulumi.Input[bool]]:
        """
        display this help and exit.
        """
        return pulumi.get(self, "help")

    @help.setter
    def help(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "help", value)

    @property
    @pulumi.getter(name="inPlace")
    def in_place(self) -> Optional[pulumi.Input[str]]:
        """
        edit files in place (makes backup if SUFFIX supplied)
        """
        return pulumi.get(self, "in_place")

    @in_place.setter
    def in_place(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "in_place", value)

    @property
    @pulumi.getter(name="inputFiles")
    def input_files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        corresponds to the [input-file]... argument(s).
        """
        return pulumi.get(self, "input_files")

    @input_files.setter
    def input_files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "input_files", value)

    @property
    @pulumi.getter(name="lineLength")
    def line_length(self) -> Optional[pulumi.Input[int]]:
        """
        specify the desired line-wrap length for the `l' command
        """
        return pulumi.get(self, "line_length")

    @line_length.setter
    def line_length(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "line_length", value)

    @property
    @pulumi.getter(name="nullData")
    def null_data(self) -> Optional[pulumi.Input[bool]]:
        """
        separate lines by NUL characters
        """
        return pulumi.get(self, "null_data")

    @null_data.setter
    def null_data(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "null_data", value)

    @property
    @pulumi.getter
    def posix(self) -> Optional[pulumi.Input[bool]]:
        """
        disable all GNU extensions.
        """
        return pulumi.get(self, "posix")

    @posix.setter
    def posix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "posix", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        suppress automatic printing of pattern space. Same as `silent`.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter(name="regexpExtended")
    def regexp_extended(self) -> Optional[pulumi.Input[bool]]:
        """
        use extended regular expressions in the script (for portability use POSIX -E).
        """
        return pulumi.get(self, "regexp_extended")

    @regexp_extended.setter
    def regexp_extended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "regexp_extended", value)

    @property
    @pulumi.getter
    def sandbox(self) -> Optional[pulumi.Input[bool]]:
        """
        operate in sandbox mode (disable e/r/w commands).
        """
        return pulumi.get(self, "sandbox")

    @sandbox.setter
    def sandbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sandbox", value)

    @property
    @pulumi.getter
    def script(self) -> Optional[pulumi.Input[str]]:
        """
        script only if no other script.
        """
        return pulumi.get(self, "script")

    @script.setter
    def script(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "script", value)

    @property
    @pulumi.getter
    def separate(self) -> Optional[pulumi.Input[bool]]:
        """
        consider files as separate rather than as a single, continuous long stream.
        """
        return pulumi.get(self, "separate")

    @separate.setter
    def separate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "separate", value)

    @property
    @pulumi.getter
    def silent(self) -> Optional[pulumi.Input[bool]]:
        """
        suppress automatic printing of pattern space. Same as `quiet`.
        """
        return pulumi.get(self, "silent")

    @silent.setter
    def silent(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "silent", value)

    @property
    @pulumi.getter
    def unbuffered(self) -> Optional[pulumi.Input[bool]]:
        """
        load minimal amounts of data from the input files and flush the output buffers more often.
        """
        return pulumi.get(self, "unbuffered")

    @unbuffered.setter
    def unbuffered(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "unbuffered", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class SystemctlOptsArgs:
    def __init__(__self__, *,
                 command: 'SystemctlCommand',
                 unit: pulumi.Input[str],
                 now: Optional[pulumi.Input[bool]] = None,
                 pattern: Optional[pulumi.Input[str]] = None):
        """
        Abstraction over the `systemctl` utility on a remote system.
        :param 'SystemctlCommand' command: Corresponds to the COMMAND argument.
        :param pulumi.Input[str] unit: Corresponds to the [UNIT...] argument.
        :param pulumi.Input[bool] now: Corresponds to the `--now` option.
        :param pulumi.Input[str] pattern: Corresponds to the [PATTERN] argument
        """
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "unit", unit)
        if now is not None:
            pulumi.set(__self__, "now", now)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def command(self) -> 'SystemctlCommand':
        """
        Corresponds to the COMMAND argument.
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: 'SystemctlCommand'):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def unit(self) -> pulumi.Input[str]:
        """
        Corresponds to the [UNIT...] argument.
        """
        return pulumi.get(self, "unit")

    @unit.setter
    def unit(self, value: pulumi.Input[str]):
        pulumi.set(self, "unit", value)

    @property
    @pulumi.getter
    def now(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--now` option.
        """
        return pulumi.get(self, "now")

    @now.setter
    def now(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "now", value)

    @property
    @pulumi.getter
    def pattern(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the [PATTERN] argument
        """
        return pulumi.get(self, "pattern")

    @pattern.setter
    def pattern(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pattern", value)


@pulumi.input_type
class TarOptsArgs:
    def __init__(__self__, *,
                 archive: pulumi.Input[str],
                 directory: Optional[pulumi.Input[str]] = None,
                 extract: Optional[pulumi.Input[bool]] = None,
                 files: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 gzip: Optional[pulumi.Input[bool]] = None,
                 on_delete: Optional[pulumi.Input[bool]] = None,
                 recursive: Optional[pulumi.Input[bool]] = None,
                 strip_components: Optional[pulumi.Input[int]] = None):
        """
        Abstraction over the `tar` utility on a remote system.
        :param pulumi.Input[str] archive: Corresponds to the [ARCHIVE] argument.
        :param pulumi.Input[str] directory: Corresponds to the `--directory` option.
        :param pulumi.Input[bool] extract: Corresponds to the `--extract` option.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] gzip: Corresponds to the `--gzip` option.
        :param pulumi.Input[bool] on_delete: Whether rm should be run when the resource is created or deleted.
        :param pulumi.Input[bool] recursive: Corresponds to the `--recursive` option.
        :param pulumi.Input[int] strip_components: Corresponds to the `--strip-components` option.
        """
        pulumi.set(__self__, "archive", archive)
        if directory is not None:
            pulumi.set(__self__, "directory", directory)
        if extract is not None:
            pulumi.set(__self__, "extract", extract)
        if files is not None:
            pulumi.set(__self__, "files", files)
        if gzip is not None:
            pulumi.set(__self__, "gzip", gzip)
        if on_delete is not None:
            pulumi.set(__self__, "on_delete", on_delete)
        if recursive is not None:
            pulumi.set(__self__, "recursive", recursive)
        if strip_components is not None:
            pulumi.set(__self__, "strip_components", strip_components)

    @property
    @pulumi.getter
    def archive(self) -> pulumi.Input[str]:
        """
        Corresponds to the [ARCHIVE] argument.
        """
        return pulumi.get(self, "archive")

    @archive.setter
    def archive(self, value: pulumi.Input[str]):
        pulumi.set(self, "archive", value)

    @property
    @pulumi.getter
    def directory(self) -> Optional[pulumi.Input[str]]:
        """
        Corresponds to the `--directory` option.
        """
        return pulumi.get(self, "directory")

    @directory.setter
    def directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory", value)

    @property
    @pulumi.getter
    def extract(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--extract` option.
        """
        return pulumi.get(self, "extract")

    @extract.setter
    def extract(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "extract", value)

    @property
    @pulumi.getter
    def files(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def gzip(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--gzip` option.
        """
        return pulumi.get(self, "gzip")

    @gzip.setter
    def gzip(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "gzip", value)

    @property
    @pulumi.getter(name="onDelete")
    def on_delete(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether rm should be run when the resource is created or deleted.
        """
        return pulumi.get(self, "on_delete")

    @on_delete.setter
    def on_delete(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "on_delete", value)

    @property
    @pulumi.getter
    def recursive(self) -> Optional[pulumi.Input[bool]]:
        """
        Corresponds to the `--recursive` option.
        """
        return pulumi.get(self, "recursive")

    @recursive.setter
    def recursive(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "recursive", value)

    @property
    @pulumi.getter(name="stripComponents")
    def strip_components(self) -> Optional[pulumi.Input[int]]:
        """
        Corresponds to the `--strip-components` option.
        """
        return pulumi.get(self, "strip_components")

    @strip_components.setter
    def strip_components(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "strip_components", value)


@pulumi.input_type
class TeeOptsArgs:
    def __init__(__self__, *,
                 files: pulumi.Input[Sequence[pulumi.Input[str]]],
                 append: Optional[pulumi.Input[bool]] = None,
                 ignore_interrupts: Optional[pulumi.Input[bool]] = None,
                 output_error: Optional[pulumi.Input['TeeMode']] = None,
                 pipe: Optional[pulumi.Input[bool]] = None,
                 version: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `rm` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] files: Corresponds to the [FILE] argument.
        :param pulumi.Input[bool] append: Append to the given FILEs, do not overwrite
        :param pulumi.Input[bool] ignore_interrupts: Ignore interrupt signals.
        :param pulumi.Input['TeeMode'] output_error: Set behavior on write error.
        :param pulumi.Input[bool] pipe: Operate in a more appropriate MODE with pipes.
        :param pulumi.Input[bool] version: Output version information and exit.
        """
        pulumi.set(__self__, "files", files)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if ignore_interrupts is not None:
            pulumi.set(__self__, "ignore_interrupts", ignore_interrupts)
        if output_error is not None:
            pulumi.set(__self__, "output_error", output_error)
        if pipe is not None:
            pulumi.set(__self__, "pipe", pipe)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def files(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [FILE] argument.
        """
        return pulumi.get(self, "files")

    @files.setter
    def files(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "files", value)

    @property
    @pulumi.getter
    def append(self) -> Optional[pulumi.Input[bool]]:
        """
        Append to the given FILEs, do not overwrite
        """
        return pulumi.get(self, "append")

    @append.setter
    def append(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "append", value)

    @property
    @pulumi.getter(name="ignoreInterrupts")
    def ignore_interrupts(self) -> Optional[pulumi.Input[bool]]:
        """
        Ignore interrupt signals.
        """
        return pulumi.get(self, "ignore_interrupts")

    @ignore_interrupts.setter
    def ignore_interrupts(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ignore_interrupts", value)

    @property
    @pulumi.getter(name="outputError")
    def output_error(self) -> Optional[pulumi.Input['TeeMode']]:
        """
        Set behavior on write error.
        """
        return pulumi.get(self, "output_error")

    @output_error.setter
    def output_error(self, value: Optional[pulumi.Input['TeeMode']]):
        pulumi.set(self, "output_error", value)

    @property
    @pulumi.getter
    def pipe(self) -> Optional[pulumi.Input[bool]]:
        """
        Operate in a more appropriate MODE with pipes.
        """
        return pulumi.get(self, "pipe")

    @pipe.setter
    def pipe(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pipe", value)

    @property
    @pulumi.getter
    def version(self) -> Optional[pulumi.Input[bool]]:
        """
        Output version information and exit.
        """
        return pulumi.get(self, "version")

    @version.setter
    def version(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "version", value)


@pulumi.input_type
class WgetOptsArgs:
    def __init__(__self__, *,
                 url: pulumi.Input[Sequence[pulumi.Input[str]]],
                 directory_prefix: Optional[pulumi.Input[str]] = None,
                 https_only: Optional[pulumi.Input[bool]] = None,
                 no_verbose: Optional[pulumi.Input[bool]] = None,
                 output_document: Optional[pulumi.Input[str]] = None,
                 quiet: Optional[pulumi.Input[bool]] = None,
                 timestamping: Optional[pulumi.Input[bool]] = None):
        """
        Abstraction over the `wget` utility on a remote system.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] url: Corresponds to the [URL...] argument.
        :param pulumi.Input[str] directory_prefix: The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
        :param pulumi.Input[bool] https_only: When in recursive mode, only HTTPS links are followed.
        :param pulumi.Input[bool] no_verbose: Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
        :param pulumi.Input[str] output_document: The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
        :param pulumi.Input[bool] quiet: Turn off Wget's output.
        :param pulumi.Input[bool] timestamping: Turn on time-stamping.
        """
        pulumi.set(__self__, "url", url)
        if directory_prefix is not None:
            pulumi.set(__self__, "directory_prefix", directory_prefix)
        if https_only is not None:
            pulumi.set(__self__, "https_only", https_only)
        if no_verbose is not None:
            pulumi.set(__self__, "no_verbose", no_verbose)
        if output_document is not None:
            pulumi.set(__self__, "output_document", output_document)
        if quiet is not None:
            pulumi.set(__self__, "quiet", quiet)
        if timestamping is not None:
            pulumi.set(__self__, "timestamping", timestamping)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        Corresponds to the [URL...] argument.
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="directoryPrefix")
    def directory_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The  directory prefix is the directory where all other files and subdirectories will be saved to, i.e. the top of the retrieval tree.  The default is . (the current directory).
        """
        return pulumi.get(self, "directory_prefix")

    @directory_prefix.setter
    def directory_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "directory_prefix", value)

    @property
    @pulumi.getter(name="httpsOnly")
    def https_only(self) -> Optional[pulumi.Input[bool]]:
        """
        When in recursive mode, only HTTPS links are followed.
        """
        return pulumi.get(self, "https_only")

    @https_only.setter
    def https_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "https_only", value)

    @property
    @pulumi.getter(name="noVerbose")
    def no_verbose(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn off verbose without being completely quiet (use -q for that), which means that error messages and basic information still get printed.
        """
        return pulumi.get(self, "no_verbose")

    @no_verbose.setter
    def no_verbose(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "no_verbose", value)

    @property
    @pulumi.getter(name="outputDocument")
    def output_document(self) -> Optional[pulumi.Input[str]]:
        """
        The  documents  will  not  be  written  to the appropriate files, but all will be concatenated together and written to file.
        """
        return pulumi.get(self, "output_document")

    @output_document.setter
    def output_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "output_document", value)

    @property
    @pulumi.getter
    def quiet(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn off Wget's output.
        """
        return pulumi.get(self, "quiet")

    @quiet.setter
    def quiet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "quiet", value)

    @property
    @pulumi.getter
    def timestamping(self) -> Optional[pulumi.Input[bool]]:
        """
        Turn on time-stamping.
        """
        return pulumi.get(self, "timestamping")

    @timestamping.setter
    def timestamping(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "timestamping", value)


