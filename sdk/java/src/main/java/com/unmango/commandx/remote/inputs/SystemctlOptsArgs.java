// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.unmango.commandx.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.unmango.commandx.remote.enums.SystemctlCommand;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Abstraction over the `systemctl` utility on a remote system.
 * 
 */
public final class SystemctlOptsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SystemctlOptsArgs Empty = new SystemctlOptsArgs();

    /**
     * Corresponds to the COMMAND argument.
     * 
     */
    @Import(name="command", required=true)
    private SystemctlCommand command;

    /**
     * @return Corresponds to the COMMAND argument.
     * 
     */
    public SystemctlCommand command() {
        return this.command;
    }

    /**
     * Corresponds to the `--now` option.
     * 
     */
    @Import(name="now")
    private @Nullable Output<Boolean> now;

    /**
     * @return Corresponds to the `--now` option.
     * 
     */
    public Optional<Output<Boolean>> now() {
        return Optional.ofNullable(this.now);
    }

    /**
     * Corresponds to the [PATTERN] argument
     * 
     */
    @Import(name="pattern")
    private @Nullable Output<String> pattern;

    /**
     * @return Corresponds to the [PATTERN] argument
     * 
     */
    public Optional<Output<String>> pattern() {
        return Optional.ofNullable(this.pattern);
    }

    /**
     * Corresponds to the [UNIT...] argument.
     * 
     */
    @Import(name="unit", required=true)
    private Output<String> unit;

    /**
     * @return Corresponds to the [UNIT...] argument.
     * 
     */
    public Output<String> unit() {
        return this.unit;
    }

    private SystemctlOptsArgs() {}

    private SystemctlOptsArgs(SystemctlOptsArgs $) {
        this.command = $.command;
        this.now = $.now;
        this.pattern = $.pattern;
        this.unit = $.unit;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SystemctlOptsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SystemctlOptsArgs $;

        public Builder() {
            $ = new SystemctlOptsArgs();
        }

        public Builder(SystemctlOptsArgs defaults) {
            $ = new SystemctlOptsArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param command Corresponds to the COMMAND argument.
         * 
         * @return builder
         * 
         */
        public Builder command(SystemctlCommand command) {
            $.command = command;
            return this;
        }

        /**
         * @param now Corresponds to the `--now` option.
         * 
         * @return builder
         * 
         */
        public Builder now(@Nullable Output<Boolean> now) {
            $.now = now;
            return this;
        }

        /**
         * @param now Corresponds to the `--now` option.
         * 
         * @return builder
         * 
         */
        public Builder now(Boolean now) {
            return now(Output.of(now));
        }

        /**
         * @param pattern Corresponds to the [PATTERN] argument
         * 
         * @return builder
         * 
         */
        public Builder pattern(@Nullable Output<String> pattern) {
            $.pattern = pattern;
            return this;
        }

        /**
         * @param pattern Corresponds to the [PATTERN] argument
         * 
         * @return builder
         * 
         */
        public Builder pattern(String pattern) {
            return pattern(Output.of(pattern));
        }

        /**
         * @param unit Corresponds to the [UNIT...] argument.
         * 
         * @return builder
         * 
         */
        public Builder unit(Output<String> unit) {
            $.unit = unit;
            return this;
        }

        /**
         * @param unit Corresponds to the [UNIT...] argument.
         * 
         * @return builder
         * 
         */
        public Builder unit(String unit) {
            return unit(Output.of(unit));
        }

        public SystemctlOptsArgs build() {
            if ($.command == null) {
                throw new MissingRequiredPropertyException("SystemctlOptsArgs", "command");
            }
            if ($.unit == null) {
                throw new MissingRequiredPropertyException("SystemctlOptsArgs", "unit");
            }
            return $;
        }
    }

}
